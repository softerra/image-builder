#!/usr/bin/env groovy

def workerJob = 'oprog-img-bbb-build'
def configList = [
		'iotcrafter-debian-stretch-v4.9': [
				'id': 'v4.9', 'branchId': 'dev', 'oldRelease': false ],
		'iotcrafter-debian-stretch-v4.14': [
				'id': 'v4.14', 'branchId': 'dev', 'oldRelease': false ]
	]

properties([disableConcurrentBuilds(),
			buildDiscarder(
				logRotator(artifactDaysToKeepStr: '',
							artifactNumToKeepStr: '',
							daysToKeepStr: '',
							numToKeepStr: '5')),
			parameters([
				string(defaultValue: '', description: 'force building the specified revision, use HEAD by default', name: 'buildCommit'),
				string(defaultValue: '', description: '', name: 'bsRepo'),
				string(defaultValue: '', description: '', name: 'bsBranch')
			]),
			pipelineTriggers([pollSCM('H 04 * * *')])
		])

node {
	//debug
	println("Params: ${params}")

	stage('Cleanup') {
		deleteDir()
	}

	def bsRepo = ''
	def bsBranch = ''
	def scmVars = []

	def headInfo = ''
	def buildCommit = ''

	stage('Sources') {
		// use the same repo URL and branch as ones of this Jenkinsfile script
		if (params.bsRepo != '' && params.bsBranch != '') {
			bsRepo = params.bsRepo
			bsBranch = params.bsBranch
		} else {
			def repoDef = scm.getUserRemoteConfigs()[0]
			bsRepo = repoDef.getUrl()
			def branchDef = scm.getBranches()[0]
			bsBranch = branchDef.getName()
		}

		// debug
		println("bsRepo: ${bsRepo}")
		println("bsBranch: ${bsBranch}")

		scmDesc = [$class: 'GitSCM',
						branches: [[name: bsBranch]],
						doGenerateSubmoduleConfigurations: false,
						extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'image-builder']],
						submoduleCfg: [],
						userRemoteConfigs: [[url: bsRepo]]
					]
		scmVars = checkout(scmDesc)

		if (params.buildCommit != '') {
			buildCommit = params.buildCommit
			dir('image-builder') {
				sh """
					git checkout ${buildCommit}
				"""
			}
		} else {
			buildCommit = scmVars.GIT_COMMIT
		}

		//debug
		println("curCommit: ${scmVars.GIT_COMMIT}")
		println("buildCommit: ${buildCommit}")

		dir('image-builder') {
			sh """
				# current head info (special for ones commented as 'RC: alphanumeric')
				git describe --tags --first-parent | grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2}-' > ${env.WORKSPACE}/head-info || \
					git log -1 --date=format:'%F' --format='%h %ad %s' | \
						sed -n '/[[:space:]]RC:[[:space:]][^[:space:]]*/ {
								s/\\([[:alnum:]]*\\)[[:space:]]\\([^[:space:]]*\\)[[:space:]]RC:[[:space:]]\\([^[:space:]]*\\).*/\\2-rc.\\3.bone-g\\1/ p
							}
							/[[:space:]]RC:[[:space:]][^[:space:]]*/ !{
								s/\\([[:alnum:]]*\\)[[:space:]]\\([^[:space:]]*\\)[[:space:]].*/\\2-bone-g\\1/ p
							}' > ${env.WORKSPACE}/head-info
			"""
		}

		headInfo = readFile('head-info').trim()
	}

	//debug
	println("headInfo: ${headInfo}")
	println("workerJob: ${workerJob}")

	configList.each { buildConfig, configProps ->

		stage("Current-${configProps.id}") {
			println("Building: ${headInfo}, ${buildConfig}")

			build([job: workerJob,
				parameters: [
					[$class: 'StringParameterValue', name: 'bsRepo', value: bsRepo ],
					[$class: 'StringParameterValue', name: 'buildGitCommit', value: buildCommit ],
					[$class: 'StringParameterValue', name: 'buildInfo', value: headInfo ],

					[$class: 'BooleanParameterValue', name: 'isOldRelease', value: false ],

					[$class: 'StringParameterValue', name: 'buildConfig', value: buildConfig ],

					[$class: 'StringParameterValue', name: 'branchId', value: configProps.branchId ],
					[$class: 'StringParameterValue', name: 'configId', value: configProps.id ]
				]
			])
		}
	}
}
